AOP
Aspect Oriented Programming 관점지향프로그래밍
공통관심사항이랑 핵심관심사항을 분리하는 것을 말한다

우리는 시간측정 로직들을 메서드에서 필요한 곳에 직접 다 붙혔는데 그게 아니라
시간 측정 로직을 한 곳에 다 모으고 내가 원하는 곳에 적용하는 것이다
예를 들어 TimeTraceAop 라는 곳에 딱 모아놓고 이거를 난 HelloController에 적용하고 MemberService에 적용하고 내가 원하는 곳에 그냥 적용할거야 라고 지정만 해준다

우선 프로젝트 하위에 aop라는 패키지를 하나 만들고 TimeTraceAop 라는 클래스를 하나 만든다 그 다음에 @Aspect 어노테이션을 달아줘야 aop로 사용할 수 있다
그 다음에는 메뉴얼 보고 따라 하면 어렵지 않다

joinPoint.ToString 하면 여기 안에 어떤 메소드를 콜 하는지 이름을 다 얻을 수 있다
원래는 정형화 된 메서드 같은 게 아니라 AOP에 걸어서 쓰는구나 라고 바로 인지할 수 있게 따로 스프링 빈에 등록해서 쓰는걸 더 선호하는데 우리는 TimeTraceAop 클래스에서 @Component 를 달아서 사용해본다

그리고 aop의 메서드에 @Around 어노테이션을 달면 공동관심사항(어디에다가 적용 할 지)에  타겟팅을 해 줄 수 있다
@Around("execution(* hello.hellospring..*(..))")
우리는 이렇게 하면 hellospring 패키지 아래에 전부 적용하는 것이다

호출할때마다 joinPoint.파라미터 를 이용해서 getArg로 argument가 뭔지 getTarget으로 어느 target에서 호출하는지 등등 원하는걸 조작 할 수 있고 다음메서드를 호출 할 떄마다 중간에서 인터셉트가 걸리는 개념이라서 다음으로 호출을 안 할 수도 있다
이렇게 중간에 뭔가 인터세팅해서 풀 수 있는 기술이 바로 AOP이다

결과적으로 
회원가입, 회원조회등 핵심 관심사항과 시간을 측정하는 공통 관심사항을 분리했다
시간을 측정하는 로직을 별도의 공통 로직으로 만들었다
핵심 관심 사항을 깔끔하게 유지할 수 있다(서비스 하나도 건들지 않음)
변경이 필요하면 aop로직만 변경하면 된다
원하는 적용 대상을 선택할 수 있다(@Around 이용해서!) 
보통 패키지 레벨로 많이 적용한다

aop가 스프링에서 어떻게 동작하는지!

스프링에 aop를 적용하기 전!!
컨트롤러에서 서비스 호출 할 때 그냥 컨트롤러가 서비스를 의존하고 있고 컨트롤러에서 메서드를 호출하면 서비스에있는 메서드를 호출하게 된다

스프링에 aop를 적용하고 어디에 적용할지 까지 지정을 한 경우!!
서비스가 딱 지정이 된다 그러면 스프링이 가짜 서비스를 만들어낸다 (proxy 프록시 라고 함) 
그리고 스프링 컨테이너는 이렇게 동작한다 
스프링이 올라올 때 컨테이너에 진짜 스프링 빈 말고 가짜 spring bean 을 앞에 세워 놓는다
이 가짜 스프링 빈이 끝나고 joinPoint.proceed()를 하면 내부적으로 막 이것저것 타서 그때 진짜 스프링빈을 호출해준다 
그래서 컨트롤러가 호출하는 거는 진짜 서비스가 아니라 proxy라는 기술로 발생하는 가짜 서비스이다

프록시에 대해서는 나중에 핵심 강의에서 다시 설명 해주신다 
지금 우리는 스프링에 aop를 적용하면 proxy 라는 걸 썼다는걸 이해하면 된다

스프링에서 aop가 가능한 이유는 DI를 사용하기 때문이다 스프링컨테이너에서 가짜 스프링빈을 만들어서 걔를 그냥 주입시켜주면되기 때문이다 di가 없이 컨트롤러에서 직접 서비스를 new로 생성하게 되면 이런게 불가능해 진다
DI가 있기 때문에 컨트롤러가 있으면 나는 뭔지 모르겠고 그냥 받아서 쓸게 라고 할때 프록시가 들어오는 것이다
