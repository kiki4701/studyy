HTTP와 HTTPS

HTTP 란?
HTTP (Hyper Text Transfer Protocol) 는 클라이언트와 서버 간 통신을 위한 통신 규칙 세트 또는 프로토콜로, 80번 포트를 사용하고 있다. 따라서 HTTP 서버가 80번 포트에서 요청을 기다리고 있으며, 클라이언트는 80번 포트로 요청을 보내게 된다. HTTP는 1989년 팀 버너스 리에 의해 처음 설계되었으며, WWW(World-Wide-Web) 기반에서 세계적인 정보를 공유하는 데 큰 역할을 하였다.

HTTP의 구조
HTTP는 OSI(Open Systems Interconnection) 네트워크 통신 모델의 애플리케이션 계층 프로토콜로 TCP/IP 위에서 작동한다. HTTP는 상태를 가지고 있지 않는 Satateless 프로토콜이며 Method, Path, Version, Headers, Body 등으로 구성된다. 하지만 HTTP는 암호화가 되지 않은 평문 데이터를 전송하는 프로토코이였기 때문에, HTTP로 비밀번호나 주민등록번호 등을 주고 받으면 제 3자가 정보를 조회할 수 있었다. 그리고 이러한 문제를 해결하기 위해 HTTPS가 등장하게 되었다.

     (Method) (Path)  (Version of the protocol)
	↓      ↓      ↓
	GET / HTTP / 1.1
	Host: developer.mozilla.org 	← (Headers)
	Accept-Language: fr           	← (Headers)

서버는 숫자 코드 및 데이터 양식으로 다양한 유형의 HTTP 응답을 전송한다.
ex) 	200 - OK (정상)
	400 - Bad request (잘못된 요청)
	404 - Resource not found (리소스를 찾을 수 없음)
이러한 요청 및 응답 통신은 일반적으로 사용자에게 보이지 않는다. 브라우저와 웹 서버가 사용하는 통신 방식이므로 World Wide Web은 모든 사용자에게 일관되게 작동한다.


HTTPS란?
Hyper Text Transfer Protocol Secure, HTTP over Secure, HTTP over TLS, HTTP over SSL 등으로 불리는 HTTPS는 HTTP에 암호화가 추가된 프로토콜이다. HTTPS는 HTTP와 다르게 443번 포트를 사용하며, 네트워크 상에서 중간에 제3자가 정보를 볼 수 없도록 암호화를 지원하고 있다. 


대칭키 암호화와 비대칭키 암호화
HTTPS는 대칭키 암호화 방식과 비대칭키 암호화 방식을 모두 사용하고 있다. 각각희 암호화 방식은 다음과 같다.

** 대칭키 암호화
	- 클라이언트와 서버가 동일한 키를 사용해 암호화/복호화를 진행함
	- 키가 노출되면 매우 위험하지만 연산 속도가 빠름
** 비대칭키 암호화
	- 1개의 쌍으로 구성된 공개키와 개인키를 암호화/복호화 하는데 사용함
	- 키가 노출되어도 비교적 안전하지만 연산 속도가 느림

비대칭키 암호화는 공개키/개인키 암호화 방식을 이용해 데이터를 암호화 하고 있다. 공개키와 개인키는 서로를 위한 1쌍의 키이다.
- 공개키(퍼블릭 키) : 모두에게 공개가능한 키
- 개인키 : 나만 가지고 알고 있어야 하는 키

암호화를 공개키로 하느냐 개인키로 하느냐에 따라 얻는 효과가 다른데, 공개키와 개인키로 암호화하면 각각 다음과 같은 효과를 얻을 수 있다.
- 공개키 암호화 : 공개키로 암호화를 하면 개인키로만 복호화할 수 있다. → 개인키는 나만 가지고 있으므로, 나만 볼 수 있다.
- 개인키 암호화 : 개인키로 암호화하면 공개키로만 복호화할 수 있다. → 공개키는 모두에게 공개되어 있으므로, 내가 인증한 정보임을 알려 신뢰성을 보장할 수 있다.


HTTPS 프로토콜의 작동
HTTPS는 HTTP 요청 및 응답을 SSL 및 TLS 기술에 결합한다. HTTLS 웹 사이트는 독립된 인증 기관(CA)에서 SSL/TLS 인증서를 획득해야 한다. 이러한 웹 사이트는 신뢰를 구축하기 위해 데이터를 교환하기 전에 브라우저와 인증서를 공유한다. SSL 인증서는 암호화 정볻고 포함하므로 서버와 웹 브라우저는 암호화 된 데이터나 스크램블 된 데이터를 교환할 수 있다. 프로세스는 다음과 같이 작동한다.

1. 사용자 브라우저의 주소 표시줄에 https://URL 형식을 입력하여 HTTPS 웹사이트를 방문한다.
2. 브라우저는 서버의 SSL 인증서를 요청하여 사이트의 신뢰성을 검증하려고 시도한다.
3. 서버는 퍼블릭 키가 포함된 SSL 인증서를 회신으로 전송한다.
4. 웹 사이트의 SSL 인증서는 서버 아이덴티티를 증명한다. 브라우저에서 인증되면, 브라우저가 퍼블릭 키를 사용하여 비밀 세션 키가 포함된 메시지를 암호화하고 전송한다.
5. 웹 서버는 개인 키를 사용하여 메시지를 해독하고 세션 키를 검색한다. 그런 다음, 세션 키를 암호화 하고 브라우저에 승인 메시지를 전송한다.
6. 이제 브라우저와 웹 서버 모두 동일한 세션 키를 사용하여 메시지를 안전하게 교환하도록 전환한다.

여기서 세션키는 주고 받는 데이터를 암호화하기 위해 사용되는 대칭키이며, 데이터 간의 교환에는 빠른 연산 속도가 필요하므로 세션키는 대칭키로 만들어진다. 세션키를 클라이언트와 서버가 교환하는 과정에서 비대칭키가 사용된다.
즉, 처음 연결을 성립하여 안전하게 세션키를 공유하는 과정에서 비대칭키가 사용되는 것이고, 이후에 데이터를 교환하는 과정에서 빠른 연산 속도를 위해 대칭키가 사용되는 것이다.
