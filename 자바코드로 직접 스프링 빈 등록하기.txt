자바코드로 직접 스프링 빈을 등록하기 위해서는

Configration 클래스를 하나 만들고(우리는 SpringConfig)

@Configuration 어노테이션을 붙힌다

그 후 멤버 서비스를 리턴하는 메서드를 만들고 메서드 위에 @Bean 어노테이션을 붙힌다

이러면 스프링이 @Configuration 을 보고 스프링빈에 등록하라는 뜻이네 라고 받아들인 뒤 @Bean 에 있는 로직을 호출을 해서 리턴값을 스프링빈에 등록해준다

그 뒤에는 똑같이 @AutoWired 를 통하여 스프링컨테이너 안에 있는 객체를 찾아서 자동으로 연결관계가 형성이 된다

 

예전에는 XML 이라는 문서로 설정을 했는데 요새는 거의 사용하지않음

 

DI에는 필드주입, setter주입, 생성자 주입 3가지가 있다

우리가 한게 생성자 주입 (생성자에 @AutoWired 사용해서 넣는 방식)

필드주입방식은 선언한 변수에 @AutoWired를 바로 붙혀서 사용하는 방식. 중간에 뭔가 바꿀 수 있는 방법이 없어서 별로 좋지 않다 (생성자는 변경이 가능함)

setter 주입방식은 setter를 생성해서 거기에 @Autowired 를 붙혀서 사용하면된다 하지만 얘는 set을 중간에 바꿀수있게 노출이 되기 때문에 좋지않다(개발은 최대한 호출하지 않아야 될 메서드가 호출되면 안된다)

의존관계가 실행 중에 동적으로 변하는 경우는 거의(라고 하고 아예) 없으므로 생성자주입 방식을 사용하는게 제일 좋다!

컴포넌트스캔 방식이 더 편하지만

자바코드로 직접 빈을 등록하는걸 알아야 하는 이유는 정형화되지 않거나, 상황에 따라 구현 클래스를 변경해야 할 경우 설정을 통해 스프링빈으로 등록하면 되기 때문이다

우리같은 경우 처음 설계시에 db가 아직 정해지지않은 상태로 코드를 짜고 있는 경우이기 때문에 이 방식으로 해서 나중에 @Bean에 등록되어 있는 것 중 멤버메모리레포지토리만 나중에 정해진 레포지토리로 변경해서 등록 할 수 있다
(같은 작업을 컴포넌트스캔 방식으로 할 경우 코드를 여러 줄 바꿔야 한다)

@Autowired를 통한 DI는 스프링이 관리하는 객체에서만 동작하고 스프링 빈으로 등록하지 않고 내가 직접 생성한 객체에서는 동작하지 않는다(스프링컨테이너에 들어있지 않기 떄문에 당연한것)