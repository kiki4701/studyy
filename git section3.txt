//git section3

Branch : 분기된 가지 (다른 차원)
 
  - 프로젝트를 하나 이상의 모습으로 관리해야 할 때 사용
     ex) 실배포용, 테스트 서버용, 새로운 시도용

  - 여러 작업들이 각각 독립되어 진행될 때 사용  
     ex) 여러 기능들을 동시에 작업, 여러 작업자가 다른부분들을 동시에 작업

// 브랜치 생성하는 명령어
git branch (브랜치 명)

// 브랜치의 목록들을 확인하는 명령어
git branch

//특정 브랜치로 이동하는 명령어
git switch (브랜치 명)

//브랜치 생성과 동시에 이동하는 명령어
git switch -c (브랜치 명)

// 브랜치 삭제하기
git branch -d(브랜치 명)

// 내용 남아있는 브랜치 강제 삭제하는 명령어
git branch -D(브랜치명)

// 브랜치 이름 바꾸기
git branch -m (기존 브랜치명) (바꿀 브랜치 명)

//여러 브랜치의 내역 편리하게 보기
git log --all --decorate -- oneline --graph

****** 서로 다른 브랜치를 합치는 방식
 - merge : 두 브랜치를 한 커밋에 이어붙인다
	- 브랜치 사용내역을 남길 필요가 있을 때 적합한 방식이다.
 - rebase : 브랜치를 다른 브랜치에 이어붙인다
	- 한 줄로 깔끔하게 정리된 내역을 유지하기 원할 때 적합하다
	- 이미 팀원과 공유된 커밋들에 대해서는 사용하지 않는 것이 좋다.

//merge 하기 (main 브랜치에서 실행해야 한다)
git merge (브랜치 명)
	- merge 도 하나의 커밋이므로 reset 으로 되돌릴 수 있다

//rebase 하기 (옮기려는 브랜치에서 실행해야 한다)
git rebase main
	-> main 브랜치로 이동 후 
	-> git merge (브랜치 명)

//당장 conflict 해결이 어려울 경우 merge 중단하는 명령어
git merge --abort

//당장 conflict 해결이 어려울 경우 rebase 중단하는 명령어
git rebase --abort

//충돌을 해결한 후 계속 진행하는 명령어
git rebase --continue

(rebase 작업은 충돌 시 CLI 로 해결하는걸 권장함)



	



