스프링이 테스트 할 때는 @SpringBootTest 달아주면 된다 

보통 테스트를 할 때는 데이터를 어디서 가져다 쓰는게 아니라 우리가 필요한 것을 인젝션 해서 쓰고 끝이기 때문에 굳이 생성자 주입 방식을 쓰지 않고 필드 주입방식을 사용한다(변수 앞에 @Autowired 붙히기!, Test는 사실 제일 끝단에 있는 것이기 때문에 Test코드를 작성 할 때에는 제일 편한 방식을 쓰면 된다)
 
테스트는 반복을 할 수 있어야 한다 그 작업을 편리하게 하기 위해서 @Transactional 어노테이션을 이용한다

데이터베이스는 기본적으로 트랜잭션이라는 개념이있는데 db에 데이터를 인서트 쿼리 한 다음 커밋을 해야 db에 반영이 된다
그래서 쿼리를 한 다음 롤백을 해버리면 db에 반영이 되지 않는다

@Transactional 이라는 어노테이션을 테스트 케이스에 달아놓으면 실행 할 때 트랙잭션을 먼저 실행하고 그 다음에 db에 데이터를 인서트 쿼리 한 다음에 테스트가 끝나면 롤백을 해준다 그래서 db가 계속 비워지므로 테스트를 반복적으로 진행 할 수 있다 (그래서 사실 테스트를 할 때는 테스트용 db나 로컬에 있는 db를 이용해서 테스트를 한다)
테스트 메서드마다 다 일일히 동일하게 동작한다

@트랜잭셔널이 서비스나 이런 곳에 붙으면 당연히 정상적으로 작동을 하고 테스트 케이스에 붙었을 때만 롤백을 하게 된다

단위테스트는 스프링없이 순수하게 Java 코드로 하면서 최소한의 단위로 테스트 하는 것을 말한다
통합테스트는 스프링컨테이너랑 db까지 연동하고 전체적으로 구동을 하는 테스트를 말한다

순수한 단위 테스트가 훨씬 좋을 테스트일 확률이 높다 그러므로 단위단위로 쪼개서 테스트를 잘 할 수 있도록 하고 스프링 컨테이너 없이 테스트 할 수 있도록 훈련을 해야 한다