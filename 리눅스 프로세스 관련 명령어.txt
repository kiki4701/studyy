리눅스 프로세스 관련 명령어

jobs
진행중인 작업 상태를 보여줌
: jobs [-l, PID까지 보여줌]

free
메모리 사용량을 확인하는 명령어
: free [opt]

ps
프로세스 확인 명령어
ps 상태코드 (STAT 필드)
- P : 수행 가능 | 수행 중
- T : 정지된 상태(Traced or stopped)
- D : 인터럽트할 수 없는 대기상태
- S : 20초 미만 잠듦(특정 이벤트가 끝나길 대기)
- L : 20초 이상 길게 잠듦
- W : 페이징 상태
- Z : 좀비 프로세스 상태
: ps [opt]
-------------------------------------------------------
no 옵션	| PID : 프로세스 ID
	| TTY : 프로세스가 연결된 제어 터미널
	| TIME : CPU 사용 시간 시:분
	| CMD : 실행된 프로세스명
-------------------------------------------------------
-aux	no 옵션에 더해서
	| USER :
	| %CPU : CPU 사용비율
	| %MEM : 메모리 사용 비율
	| VSZ : 사용중인 가상 메모리 크기
	| RSS : 사용중인 실제 메모리 크기
	| STAT : 프로세스 상태
		- R : 실행중
		- S : sleeping
		- I : idle
		- Z : Zombie
		- W : swapped out
		- N : nice에 의해 순위 낮아짐
		- T : 종료
	| START : 프로세스 시작 시간 | 날짜
-------------------------------------------------------
-ef	기존 + 
	| UID : 프로세스 소유자명
	| PPID : 부모 프로세스 ID
	| C : 
	| STIME : 프로세스 시작 시간 | 날짜

top
CPU, MEM, Process 등 시스템 상태를 실시간으로 모니터링하거나 프로세스 관리할 수 있음(우선순위 변경, 종료 등)
: top [opt]
-n		top 실행 주기 설정
명령 모드
t		프로세스와 CPU 항목 on/off
c		Command line 옵션 on/off
shift + p		CPU 사용률 내림차순
shift + m		메모리 사용률 내림차순
shift + t		프로세스 동작 시간순
k PID		특정 프로세스 kill

nice
프로세스 실행시 실행 우선순위 조정(NI값 변경)
컴파일과 같이 CPU/MEM 많이 쓸 때 시스템 속도가 저하되므로 다른 프로세스에게 우선순위 줄 때 사용
기본값 0, -20 ~ 19까지 조정 가능
: nice [-[증가값 | n 지정값], 디폴트 10] [프로세스명]
>> nice -10 : 우선순위 기존 + 10 증가
>> nice --10 : 우선순위 기존 - 10 증가
: nice [프로세스명] (기존값에서 10 증가)

renice
실행중인 프로세스에 대한 nice값 변경
nice는 프로세스명으로 우선순위 조정 및 명령 실행시 새 프로세스 발생
renice는 PID로 우선순위 조정 및 기존 프로세스 우선순위 값을 바로 수정
: renice [opt] [NI값] [PID]
-u	사용자 이름 지정
-g	프로세스 그룹 ID 지정
-p	해당프로세스 ID 지정

kill
지정한 프로세스에 지정한 시그널을 보냄
SIGHUP : 연결끊기, 프로세스 설정파일 다시 읽음
SIGINT : 인터럽트(Ctrl + C)
SIGQUIT : 종료(Ctrl + \)
SIGKILL : 강제종료
SIGTERM : 소프트웨어 종료 시그널(디폴트)
SIGTSTP : 키보드에 의해 발생함(Ctrl + Z)
: kill [opt or signal PID]
-l	시그널 종류 출력

killall
프로세스명으로 프로세스 종료
: killall [opt] [프로세스명]
-l		시그널 리스트 출력
-s 시그널		SIGTERM 대신 해당 시그널 전송
-i		종료 전 확인
-y 시간		지정 시간 이전 종료(--young)
-o 시간		지정 시간 이후 종료(--old)
-u 사용자		해당 사용자 모든 프로세스 종료
-g 그룹		해당 그룹 프로세스 종료

nohup
프로세스 중단을 무시하고 명령 실행
표준출력, 에러는 $HOME/nohup.out 파일에 기록(쓰기 불가 작업 역시 여기에 기록)
터미널창이 닫혀도 실행중인 프로세스를 백그라운드로 작업