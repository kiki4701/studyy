테스트 실행을 할 때 메서드의 순서는 보장이 되지 않기때문에 각 메서드는 다 따로 실행되게 설계해야 한다

그러기 위해서 테스트 하나가 끝나고 나면 데이터를 클리어 해줘야 한다

@AfterEach 어노테이션을 이용하여 각 메서드가 끝난뒤에 실행 될 메서드를 지정해 준 뒤 .clear() 를 실행 해 준다

.clear() 메서드는 데이터를 비워주는 메서드


로그를 찍는 방법

System.out.pringln();
Assertions.assertEquals( actual(비교해 보려는 값), expected(알아보려는 기준))
assertThat(actual).isEqualTo(expected); (alt + 엔터로 Assertions 를 static import한 뒤 사용, 요새 제일 많이 사용한다)
//ctrl + d 하면 이클립스 ctrl + alt + 방향키 한것처럼 한번에 복사 가능

//shift + f6 누르면 VS alt 다중클릭처럼 객체명을 한번에 바꿀 수 있다

우리가 보통 구현을 다 해놓고 테스트 클래스를 만들어서 실행 해 보는데 그것과 반대로

테스트 주도 개발(TDD)라는 것은 테스트를 먼저 만들고 구현 클래스를 만들어서 돌려보는 것
 
소스코드 데이터가 몇만줄 몇십만줄 넘어가면 테스트코드 없어 개발하는 것은 거의 불가능에 가깝다 그래서 우리는 테스트 관련해서는 깊이 있게 공부를 해야 한다