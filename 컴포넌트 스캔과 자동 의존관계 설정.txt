멤버 컨트롤러가 멤버 서비스에 의해 회원 가입하고, 멤버 서비스를 통해서 데이터를 조회할 수 있어야 한다.

이런걸 멤버 컨트롤러가 멤버 서비스를 의존한다고 표현한다

멤버 컨트롤러에 @Controller 라는 어노테이션을 붙여놓으면

어떤 효과가 있냐면

Spring 이 처음 실행 될 때 SpringContainer 라는 스프링 통이 생기는데 거기 안에 멤버 컨트롤러 객체를 만들어서 집어넣고 스프링이 관리를 하게 된다

이런걸 스프링 컨테이너에서 스프링 빈이 관리 된다고 표현한다

이제 멤버 컨트롤러는 멤버 서비스를 가져다 써야 하는데 컨트롤러 내에서 new 로 객체생성을 해서 사용 할 수도 있지만 여러 개의 인스턴스를 생성하지 않고 한번 만들어서 공용으로 사용하기 위해 @Autowired 어노테이션을 사용한다

이렇게 하면 스프링이 처음 실행 될 때 스프링 컨테이너 안에 스프링 컨트롤러를 등록하고 컨트롤러에서 멤버 서비스가 필요하기 때문에 스프링컨테이너 안에서 관리하는 멤버서비스를 자동으로 연결시켜준다 이게 바로 DI (Dependency Injection)

(자동으로 연결하기 위해 MemberService 클래스에 @Service 라는 어노테이션을 달아줘서 서비스인것을 스프링한테 알려준다, 마찬가지로 Repository 클래스에 @Repository 어노테이션을 달아놓으면 스프링이 리포지토리인걸 알 수 있고 멤버 서비스에서 멤버 리포지토리가 필요할 때 자동으로 연결해준다)

스프링 빈을 등록하는 방법에는 2가지가 있다

컴포넌트 스캔과 자동의존관계 설정
자바 코드로 직접 스프링 빈 등록하기
@Service @Repository @Controller 에는 @Conponent가 붙어있기 때문에 컴포넌트 스캔방법이다

저 컴포넌트 어노테이션이 붙어있으면 스프링이 시작될 때 컴포넌트 객체들을 다 생성해서 스프링컨테이너 안에 넣고 AutoWired 를 이용해서 연관관계를 연결 해 준다.

기본적으로 패키지가 다르면 컴포넌트 스캔의 대상이 안된다.


참고!!!

스프링은 스프링 컨테이너에 스프링 빈을 등록할 때, 기본으로 싱글톤으로 등록한다(유일하게 하나만 등록해서 공유)

싱글톤 아니게 설정 할 수 있지만 아주 특수한 케이스이기 때문에 그렇게 할 수 는 있다 정도만 알아놓으면 된다.