String, StringBuilder, StringBuffer

1)String
String과 나머지 두개의 제일 기본적인 차이는 String은 immutable(불변), 나머지 두 개는 mutable(변함)에 있다.
String은 .concat 이나 + 를 이용하여 직접 합칠 수 있다. 
String 객체는 한 번 생성되면 할당된 메모리 공간이 변하지 않는다. + 연산자 또는 concat 메서드를 통해 기존에 생성된 String 클래스 객체 문자열에 다른 문자열을 붙혀도 기존 문자열에 새로운 문자열을 붙히는게 아니라, 새로운 String 객체를 만든 후, 새 String 객체에 연결된 문자열을 저장하고, 그 객체를 참조하도록 한다. (즉, String 클래스 객체는 Heap 메모리 영역(가비지 컬렉션이 동작하는 영역)에 생성된다. 한 번 생성된 객체의 내부 내용을 변화시킬 수는 없다. 기존 객체가 제거되면 Java의 가비지 컬렉션이 회수한다.
이러한 이유 때문에 문자열 연산이 많은 경우, String은 성능이 좋지 않다.
하지만, Immutable한 객체는 간단하게 사용가능하고, 동기화에 대해 신경쓰지 않아도 되기 때문에 (Thread-safe), 내부 데이터를 자유롭게 공유 가능하다.


2) StringBuffer와 StringBuilder
StringBuffer/StringBuilder 는 String과 다르게 동작한다.
문자열 연산 등으로 기존 객체의 공간이 부족하게 되는 경우에 기존의 버퍼 크기를 늘리며 유연하게 동작한다. StringBuffer와 StringBuilder 클래스가 제공하는 메서드는 서로 동일하다. 

** 두 클래스의 차이점은 동기화 여부이다!!
StringBuffer 는 각 메서드별로 Synchronized Keyword 가 존재하여, 멀티스레드 환경에서도 동기화를 지원한다.
StringBuilder 는 동기화를 보장하지 않는다.
그렇기 때문에 멀티스레드 환경이라면 값 동기화 보장을 위해 StringBuffer를 사용하고, 단일스레드 환경이라면 StringBuilder 를 사용하는 것이 좋다.
단일스레드 환경에서 StringBuffer 를 사용한다고 문제가 되는 것은 아니지만, 동기화 관련 처리로 인해 StringBuffer 에 비해 성능이 좋지 않다.

